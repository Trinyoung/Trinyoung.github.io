<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>浏览器 on Trinyoung</title>
        <link>https://trinyoung.github.io/interview/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
        <description>Recent content in 浏览器 on Trinyoung</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Trinyoung</copyright>
        <lastBuildDate>Wed, 09 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://trinyoung.github.io/interview/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>网络协议和浏览器基础知识</title>
        <link>https://trinyoung.github.io/interview/p/http-browser/</link>
        <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://trinyoung.github.io/interview/p/http-browser/</guid>
        <description>&lt;h2 id=&#34;说一说网络的分层结构各种协议分别位于哪一层&#34;&gt;说一说网络的分层结构，各种协议分别位于哪一层？
&lt;/h2&gt;&lt;p&gt;网络的分层结构通常指的是网络协议的分层模型，最常见的模型是 &lt;strong&gt;OSI（开放系统互联）模型&lt;/strong&gt; 和 &lt;strong&gt;TCP/IP 模型&lt;/strong&gt;。这两种模型都将网络通信过程分为多个层次，每一层都有特定的功能和协议。以下是这两种模型的简要介绍：&lt;/p&gt;
&lt;h3 id=&#34;1-osi-模型&#34;&gt;1. OSI 模型
&lt;/h3&gt;&lt;p&gt;OSI 模型将网络通信分为七层，从上到下依次为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用层（Application Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责用户与网络的交互，提供网络服务给应用程序。&lt;/li&gt;
&lt;li&gt;协议示例：HTTP、FTP、SMTP、DNS。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表示层（Presentation Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责数据的格式化、加密和解密，确保数据能够被应用层理解。&lt;/li&gt;
&lt;li&gt;处理数据的表示、编码和转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;会话层（Session Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责建立、管理和终止会话，确保数据在会话中的顺序和完整性。&lt;/li&gt;
&lt;li&gt;提供会话控制和同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传输层（Transport Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责数据的传输和完整性，提供端到端的通信。&lt;/li&gt;
&lt;li&gt;协议示例：TCP、UDP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络层（Network Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责数据包的路由和转发，确定数据从源到目的地的路径。&lt;/li&gt;
&lt;li&gt;协议示例：IP、ICMP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据链路层（Data Link Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责在物理网络上可靠地传输数据帧，处理物理地址和错误检测。&lt;/li&gt;
&lt;li&gt;协议示例：Ethernet、PPP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物理层（Physical Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责物理媒介的传输，定义电气信号、光信号和传输介质。&lt;/li&gt;
&lt;li&gt;包括电缆、网卡、信号传输等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-tcpip-模型&#34;&gt;2. TCP/IP 模型
&lt;/h3&gt;&lt;p&gt;TCP/IP 模型是互联网的基础，通常分为四层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用层（Application Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含所有应用协议，负责用户与网络的交互。&lt;/li&gt;
&lt;li&gt;协议示例：HTTP、FTP、SMTP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传输层（Transport Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责数据的传输和完整性，提供端到端的通信。&lt;/li&gt;
&lt;li&gt;协议示例：TCP、UDP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络层（Internet Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责数据包的路由和转发，确定数据从源到目的地的路径。&lt;/li&gt;
&lt;li&gt;协议示例：IP、ICMP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路层（Link Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责在物理网络上可靠地传输数据帧，处理物理地址和错误检测。&lt;/li&gt;
&lt;li&gt;包括 Ethernet、Wi-Fi 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-总结&#34;&gt;3. 总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分层结构的意义&lt;/strong&gt;：网络的分层结构使得网络协议的设计和实现更加模块化，便于开发、维护和互操作性。每一层都可以独立发展，改变某一层的实现不会影响其他层。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能分离&lt;/strong&gt;：每一层都有特定的功能和协议，简化了网络通信的复杂性，使得网络系统更加灵活和可扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get-请求和-post-请求的区别&#34;&gt;get 请求和 post 请求的区别
&lt;/h2&gt;&lt;p&gt;GET 请求和 POST 请求是 HTTP 协议中最常用的两种请求方法，它们之间有几个关键的区别：&lt;/p&gt;
&lt;h3 id=&#34;1-请求目的&#34;&gt;1. 请求目的
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于从服务器获取数据。&lt;/li&gt;
&lt;li&gt;请求的目的是获取资源，不会对服务器上的数据进行修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于向服务器发送数据。&lt;/li&gt;
&lt;li&gt;请求的目的是提交数据，通常用于创建或更新资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-数据传输方式&#34;&gt;2. 数据传输方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据通过 URL 传递，通常附加在查询字符串中（例如：&lt;code&gt;?key1=value1&amp;amp;key2=value2&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;URL 的长度有限制（通常为 2048 字符），因此不适合传输大量数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据通过请求体（body）传递，不受 URL 长度限制。&lt;/li&gt;
&lt;li&gt;可以传输大量数据，包括文件上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-安全性&#34;&gt;3. 安全性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据在 URL 中可见，容易被缓存和记录，因此不适合传输敏感信息（如密码）。&lt;/li&gt;
&lt;li&gt;GET 请求是幂等的，即多次请求相同的 URL 不会产生副作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据在请求体中，不直接显示在 URL 中，相对更安全。&lt;/li&gt;
&lt;li&gt;POST 请求不是幂等的，重复提交可能会导致数据重复或状态改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-缓存&#34;&gt;4. 缓存
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以被缓存，浏览器会缓存 GET 请求的响应，以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常不被缓存，浏览器不会缓存 POST 请求的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-使用场景&#34;&gt;5. 使用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于获取数据，如获取网页、图片、API 数据等。&lt;/li&gt;
&lt;li&gt;适合用于查询操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交表单、上传文件、创建新资源等。&lt;/li&gt;
&lt;li&gt;适合用于数据提交和修改操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET 请求&lt;/strong&gt;：用于获取数据，通过 URL 传递参数，数据可见，适合查询操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：用于提交数据，通过请求体传递参数，数据不直接可见，适合创建和更新操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择使用 GET 还是 POST 请求取决于具体的应用场景和需求。&lt;/p&gt;
&lt;h2 id=&#34;post-请求和putdelete-请求的区别&#34;&gt;post 请求和put/delete 请求的区别？
&lt;/h2&gt;&lt;p&gt;POST、PUT 和 DELETE 请求是 HTTP 协议中常用的请求方法，它们各自有不同的用途和语义。以下是它们之间的主要区别：&lt;/p&gt;
&lt;h3 id=&#34;1-请求目的-1&#34;&gt;1. 请求目的
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于向服务器提交数据，通常用于创建新资源。&lt;/li&gt;
&lt;li&gt;请求的目的是将数据发送到服务器，服务器会处理这些数据并可能返回一个新的资源标识符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于更新现有资源或创建新资源（如果资源不存在）。&lt;/li&gt;
&lt;li&gt;请求的目的是将请求体中的数据替换服务器上指定资源的当前表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于删除指定的资源。&lt;/li&gt;
&lt;li&gt;请求的目的是从服务器上删除资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-数据传输方式-1&#34;&gt;2. 数据传输方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据通过请求体（body）传递，通常用于提交表单数据或上传文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据也通过请求体传递，通常包含完整的资源表示，用于更新现有资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常不需要请求体，删除操作通常只需要指定要删除的资源的 URL。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-幂等性&#34;&gt;3. 幂等性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非幂等&lt;/strong&gt;：多次发送相同的 POST 请求可能会导致创建多个资源。例如，提交相同的表单多次可能会创建多个相同的记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;幂等&lt;/strong&gt;：多次发送相同的 PUT 请求会产生相同的结果。即使多次更新同一资源，最终的状态仍然是相同的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;幂等&lt;/strong&gt;：多次发送相同的 DELETE 请求，第一次请求会删除资源，后续请求将不会有任何效果（因为资源已经被删除）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-使用场景&#34;&gt;4. 使用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于创建新资源，如用户注册、提交表单等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于更新现有资源，如更新用户信息、修改文章内容等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于删除资源，如删除用户、删除文章等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-示例&#34;&gt;5. 示例
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST 请求示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;POST /api/users
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT 请求示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT /api/users/1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &amp;#34;email&amp;#34;: &amp;#34;john.doe@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE 请求示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;DELETE /api/users/1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POST 请求&lt;/strong&gt;：用于创建新资源，非幂等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT 请求&lt;/strong&gt;：用于更新现有资源，幂等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE 请求&lt;/strong&gt;：用于删除资源，幂等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择使用 POST、PUT 还是 DELETE 请求取决于具体的操作需求和资源管理策略。&lt;/p&gt;
&lt;h2 id=&#34;常见的http请求头和响应头有哪些&#34;&gt;常见的http请求头和响应头有哪些？
&lt;/h2&gt;&lt;p&gt;HTTP 请求头和响应头是 HTTP 协议中用于传递信息的重要部分。以下是一些常见的请求头和响应头的分类及其说明。&lt;/p&gt;
&lt;h3 id=&#34;常见的-http-请求头&#34;&gt;常见的 HTTP 请求头
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept&lt;/strong&gt;：指定客户端能够接收的内容类型。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: application/json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;：指示请求体中数据的类型，通常在 POST 和 PUT 请求中使用。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;：用于提供身份验证信息。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Authorization: Bearer &amp;lt;token&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;：包含发起请求的客户端软件的信息。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt;：用于发送存储在客户端的 cookie 信息。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cookie: sessionId=abc123
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;：指定请求的目标主机名和端口号。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Referer&lt;/strong&gt;：指示请求的来源 URL。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Referer: https://www.example.com/page
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept-Encoding&lt;/strong&gt;：指示客户端支持的内容编码方式，例如 gzip 或 deflate。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Encoding: gzip, deflate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常见的-http-响应头&#34;&gt;常见的 HTTP 响应头
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;：指示响应体中数据的类型。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Length&lt;/strong&gt;：指示响应体的字节长度。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: 348
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt;：用于在客户端设置 cookie。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: sessionId=abc123; HttpOnly; Secure
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;：指示缓存机制的指令。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cache-Control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expires&lt;/strong&gt;：指示响应的过期时间。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expires: Wed, 21 Oct 2021 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;：用于重定向时指定新的 URL。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Location: https://www.example.com/new-page
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;：指示响应的服务器软件信息。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: Apache/2.4.41 (Ubuntu)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;：用于 CORS（跨源资源共享），指示允许哪些源访问资源。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Access-Control-Allow-Origin: *
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;HTTP 请求头和响应头用于传递关于请求和响应的元数据。请求头包含客户端发送给服务器的信息，而响应头则包含服务器返回给客户端的信息。了解这些头部信息对于调试和优化 HTTP 请求和响应非常重要。&lt;/p&gt;
&lt;h2 id=&#34;http-响应返回304代表什么含义它使用的多好还是少好&#34;&gt;http 响应返回304，代表什么含义，它使用的多好还是少好？
&lt;/h2&gt;&lt;p&gt;HTTP 响应状态码 304 表示 &amp;ldquo;Not Modified&amp;rdquo;（未修改）。它的含义和使用场景如下：&lt;/p&gt;
&lt;h3 id=&#34;1-含义&#34;&gt;1. 含义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;304 Not Modified&lt;/strong&gt;：当客户端向服务器发送请求时，通常会附带一个 &lt;code&gt;If-Modified-Since&lt;/code&gt; 或 &lt;code&gt;If-None-Match&lt;/code&gt; 头部，表示客户端希望获取自某个时间点以来是否有更新的资源。&lt;/li&gt;
&lt;li&gt;如果服务器检查到请求的资源自上次请求以来没有被修改，它会返回 304 状态码，而不是返回完整的资源。这意味着客户端可以继续使用其缓存的版本，而不需要重新下载资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-使用场景&#34;&gt;2. 使用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存优化&lt;/strong&gt;：304 状态码主要用于优化缓存机制。通过减少不必要的数据传输，304 可以显著提高性能，尤其是在带宽有限或网络延迟较高的情况下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少服务器负担&lt;/strong&gt;：当资源未修改时，服务器可以避免发送完整的响应体，从而减少服务器的负担和带宽消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用的多好还是少好&#34;&gt;3. 使用的多好还是少好？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用得当&lt;/strong&gt;：304 状态码的使用是非常有益的，尤其是在以下情况下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态资源&lt;/strong&gt;：对于静态资源（如图片、CSS、JavaScript 文件），使用 304 可以有效利用浏览器缓存，减少重复下载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;频繁访问的资源&lt;/strong&gt;：对于频繁访问但不常变化的资源，304 可以显著提高用户体验和加载速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存策略&lt;/strong&gt;：为了有效使用 304 状态码，服务器需要正确配置缓存策略（如 &lt;code&gt;Cache-Control&lt;/code&gt; 和 &lt;code&gt;Expires&lt;/code&gt; 头部），以确保客户端能够正确判断资源是否已修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用性&lt;/strong&gt;：304 状态码适用于资源更新频率较低的场景。如果资源经常变化，使用 304 可能会导致客户端频繁请求服务器，反而增加负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弊端&lt;/strong&gt;
频繁使用也会存在弊端
频繁使用 HTTP 304 状态码虽然在某些情况下可以优化性能和减少带宽消耗，但也可能带来一些弊端。以下是频繁使用 304 状态码可能导致的问题：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-频繁的请求&#34;&gt;1. 频繁的请求
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加请求数量&lt;/strong&gt;：即使资源未修改，客户端仍然需要向服务器发送请求以检查资源的状态。这可能导致大量的请求，尤其是在高流量的应用中，增加了服务器的负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-服务器负担&#34;&gt;2. 服务器负担
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处理请求的开销&lt;/strong&gt;：每次请求都需要服务器进行处理，包括解析请求、检查条件（如 &lt;code&gt;If-Modified-Since&lt;/code&gt; 或 &lt;code&gt;If-None-Match&lt;/code&gt;），即使最终返回的是 304 状态码。这种处理开销在高并发情况下可能会显著增加服务器的负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-缓存失效&#34;&gt;3. 缓存失效
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存策略复杂性&lt;/strong&gt;：如果资源的更新频率较高，频繁使用 304 状态码可能导致客户端缓存失效，用户可能会看到过时的内容。为了确保用户获取最新内容，可能需要更频繁地更新缓存策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-用户体验&#34;&gt;4. 用户体验
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：虽然 304 状态码不返回完整的资源，但客户端仍需等待服务器的响应。这可能导致用户在访问频繁更新的资源时体验到延迟，尤其是在网络条件不佳的情况下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-适用性问题&#34;&gt;5. 适用性问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不适合动态内容&lt;/strong&gt;：对于动态内容或频繁变化的资源，使用 304 状态码可能并不合适。此时，直接返回最新的资源可能更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-复杂的调试&#34;&gt;6. 复杂的调试
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调试困难&lt;/strong&gt;：在调试过程中，频繁的 304 响应可能使得开发者难以确定资源的实际状态，增加了调试的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-依赖于客户端的缓存&#34;&gt;7. 依赖于客户端的缓存
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端缓存的可靠性&lt;/strong&gt;：304 状态码依赖于客户端的缓存机制。如果客户端的缓存策略不当，可能导致用户获取到过时的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-3&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;虽然 304 状态码在优化缓存和减少带宽消耗方面具有优势，但频繁使用也可能导致请求数量增加、服务器负担加重、用户体验下降等问题。因此，在使用 304 状态码时，开发者需要根据具体的应用场景和资源更新频率，合理配置缓存策略，以平衡性能和用户体验。&lt;/p&gt;
&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP 响应状态码 304 表示资源未修改，客户端可以使用缓存的版本。&lt;/li&gt;
&lt;li&gt;304 的使用是有益的，特别是在优化缓存和减少带宽消耗方面。&lt;/li&gt;
&lt;li&gt;适当配置缓存策略可以确保 304 状态码的有效性，从而提高性能和用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分别介绍一下什么是http10-什么是http11什么是http20甚至30的版本它们之间的区别是什么&#34;&gt;分别介绍一下什么是http1.0， 什么是http1.1，什么是http2.0甚至3.0的版本，它们之间的区别是什么？
&lt;/h2&gt;&lt;p&gt;以下是对 HTTP/1.0、HTTP/1.1、HTTP/2.0 和 HTTP/3.0 的介绍，以及它们之间的主要区别。&lt;/p&gt;
&lt;h3 id=&#34;1-http10&#34;&gt;1. HTTP/1.0
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：HTTP/1.0 是 HTTP 协议的第一个正式版本，于 1996 年发布。它定义了基本的请求和响应模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非持久连接&lt;/strong&gt;：每个请求/响应对都需要建立一个新的 TCP 连接，完成后连接会关闭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单的请求和响应头&lt;/strong&gt;：缺少一些重要的头部字段，功能较为有限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存控制&lt;/strong&gt;：主要依赖 &lt;code&gt;Expires&lt;/code&gt; 头部进行缓存管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-http11&#34;&gt;2. HTTP/1.1
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：HTTP/1.1 是对 HTTP/1.0 的改进版本，于 1999 年发布。它引入了许多新特性和改进。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;持久连接&lt;/strong&gt;：默认使用持久连接，允许在同一连接上发送多个请求/响应，减少了连接建立的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引入 &lt;code&gt;Host&lt;/code&gt; 头部&lt;/strong&gt;：允许在同一 IP 地址上托管多个域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更复杂的缓存控制&lt;/strong&gt;：支持 &lt;code&gt;Cache-Control&lt;/code&gt; 头部，提供更灵活的缓存策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分块传输编码&lt;/strong&gt;：支持在不知道内容长度的情况下逐块发送响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更多的状态码&lt;/strong&gt;：引入了更多的状态码，如 100（Continue）、206（Partial Content）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-http20&#34;&gt;3. HTTP/2.0
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：HTTP/2.0 于 2015 年发布，是对 HTTP/1.1 的重大改进，旨在提高性能和效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二进制协议&lt;/strong&gt;：HTTP/2 使用二进制格式而非文本格式，减少了解析开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：允许在同一连接上并行发送多个请求和响应，解决了 HTTP/1.x 中的队头阻塞问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部压缩&lt;/strong&gt;：使用 HPACK 算法对头部进行压缩，减少了传输的数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送&lt;/strong&gt;：服务器可以主动向客户端推送资源，而无需客户端请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-http30&#34;&gt;4. HTTP/3.0
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：HTTP/3.0 是基于 QUIC 协议的 HTTP 版本，QUIC 是 Google 开发的传输层协议，旨在提高网络性能和安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于 UDP&lt;/strong&gt;：与 HTTP/2 使用 TCP 不同，HTTP/3 使用 UDP，减少了连接建立和重传的延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置加密&lt;/strong&gt;：QUIC 协议内置了加密功能，提供更好的安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：同样支持多路复用，避免了队头阻塞问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接迁移&lt;/strong&gt;：支持在网络环境变化时保持连接（如从 Wi-Fi 切换到移动数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-主要区别总结&#34;&gt;5. 主要区别总结
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;特性&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;HTTP/1.0&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;HTTP/1.1&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;HTTP/2.0&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;HTTP/3.0&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;连接&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;非持久连接&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;持久连接&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;持久连接&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;基于 UDP 的连接&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据格式&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;文本&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;文本&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;二进制&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;二进制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;多路复用&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;头部压缩&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;服务器推送&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;安全性&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无内置加密&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无内置加密&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;依赖于 TLS&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内置加密&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;总结-4&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP/1.0&lt;/strong&gt; 是最初的版本，功能简单，主要用于基本的请求和响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP/1.1&lt;/strong&gt; 引入了持久连接和更多的功能，成为广泛使用的版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP/2.0&lt;/strong&gt; 通过二进制协议和多路复用等特性显著提高了性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP/3.0&lt;/strong&gt; 基于 QUIC 协议，进一步减少延迟并增强安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;介绍一下什么是http30它是如何保证数据的完整性和可靠性的&#34;&gt;介绍一下什么是http3.0，它是如何保证数据的完整性和可靠性的？
&lt;/h2&gt;&lt;p&gt;HTTP/3.0 基于 QUIC 协议，而 QUIC 是一个基于 UDP 的传输层协议。尽管 UDP 本身不提供数据完整性和可靠性保障，QUIC 通过一系列机制来确保数据的完整性和可靠性。以下是 QUIC 如何实现这些目标的详细说明：&lt;/p&gt;
&lt;h3 id=&#34;1-数据完整性&#34;&gt;1. 数据完整性
&lt;/h3&gt;&lt;p&gt;QUIC 使用 &lt;strong&gt;加密&lt;/strong&gt; 和 &lt;strong&gt;消息认证码（MAC）&lt;/strong&gt; 来确保数据的完整性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密&lt;/strong&gt;：QUIC 协议内置了加密功能，使用 TLS 1.3 进行加密。所有传输的数据都经过加密，确保数据在传输过程中不被篡改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息认证码（MAC）&lt;/strong&gt;：QUIC 使用消息认证码来验证数据的完整性。每个数据包都包含一个 MAC，接收方可以使用这个 MAC 来验证数据是否在传输过程中被篡改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-数据可靠性&#34;&gt;2. 数据可靠性
&lt;/h3&gt;&lt;p&gt;QUIC 通过以下机制来确保数据的可靠性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重传机制&lt;/strong&gt;：QUIC 实现了重传机制，确保丢失的数据包能够被重新发送。QUIC 会跟踪每个数据包的发送状态，并在检测到丢包时请求重传。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流控制&lt;/strong&gt;：QUIC 使用流控制机制来管理数据流，确保发送方不会发送超过接收方处理能力的数据量。这有助于防止网络拥塞和数据丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;：QUIC 实现了拥塞控制算法，动态调整数据发送速率，以适应网络状况，减少丢包的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-连接迁移&#34;&gt;3. 连接迁移
&lt;/h3&gt;&lt;p&gt;QUIC 支持连接迁移，允许在网络条件变化时保持连接（例如，从 Wi-Fi 切换到移动数据）。这意味着即使在网络切换的情况下，QUIC 也能保持数据的完整性和可靠性。&lt;/p&gt;
&lt;h3 id=&#34;4-多路复用&#34;&gt;4. 多路复用
&lt;/h3&gt;&lt;p&gt;QUIC 支持多路复用，允许在同一连接上并行发送多个数据流。这减少了队头阻塞问题，并提高了数据传输的效率。&lt;/p&gt;
&lt;h3 id=&#34;5-总结&#34;&gt;5. 总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据完整性&lt;/strong&gt;：QUIC 通过加密和消息认证码确保数据在传输过程中的完整性，防止数据被篡改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据可靠性&lt;/strong&gt;：QUIC 实现了重传机制、流控制和拥塞控制，确保数据的可靠传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接迁移和多路复用&lt;/strong&gt;：QUIC 的设计使其能够在网络条件变化时保持连接，并有效利用带宽。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这些机制，QUIC 能够在基于 UDP 的传输中提供与 TCP 类似的可靠性和完整性保障，同时提高性能。&lt;/p&gt;
&lt;h2 id=&#34;http1-和-http20http30-对于队头阻塞问题&#34;&gt;http1.* 和 http2.0，http3.0 对于队头阻塞问题
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt; 仍然存在一定程度的 &lt;strong&gt;队头阻塞（Head-of-Line Blocking）&lt;/strong&gt; 问题，但和 HTTP/1.1 的队头阻塞相比，其表现形式和影响程度有所不同。&lt;/p&gt;
&lt;h3 id=&#34;http11-的队头阻塞问题&#34;&gt;&lt;strong&gt;HTTP/1.1 的队头阻塞问题&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在 HTTP/1.1 中，队头阻塞指的是浏览器对同一个域名下的请求有并发连接数限制（通常是 6 个），当某个请求耗时较长或阻塞时，其他请求也会被阻挡，造成所有请求都需要等待。&lt;/p&gt;
&lt;h3 id=&#34;http2-的队头阻塞&#34;&gt;&lt;strong&gt;HTTP/2 的队头阻塞&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;HTTP/2 引入了多路复用（Multiplexing）机制，允许在一个 TCP 连接中并行传输多个请求和响应，解决了 HTTP/1.1 中的队头阻塞问题。然而，由于 &lt;strong&gt;HTTP/2 依赖于单个 TCP 连接&lt;/strong&gt;，当这个 TCP 连接中的某个数据包丢失时，整个连接都会受到影响，导致所有请求都必须等待该数据包的重传。这种现象会导致 HTTP/2 的 TCP 层面仍然存在队头阻塞问题。&lt;/p&gt;
&lt;h3 id=&#34;http3-的改进&#34;&gt;&lt;strong&gt;HTTP/3 的改进&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;为了解决 HTTP/2 中的队头阻塞，&lt;strong&gt;HTTP/3&lt;/strong&gt; 使用了基于 &lt;strong&gt;QUIC 协议&lt;/strong&gt; 的传输方式。QUIC 是基于 UDP 的传输协议，支持独立的数据流传输，能够在丢包时仅影响丢失数据包所在的流，而不会阻塞其他流。这种机制彻底解决了 TCP 层面的队头阻塞问题。&lt;/p&gt;
&lt;h3 id=&#34;总结-5&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP/2 解决了 HTTP/1.1 的队头阻塞问题，但由于单个 TCP 连接的特性，在 TCP 层面仍可能发生队头阻塞。&lt;/li&gt;
&lt;li&gt;HTTP/3 通过 QUIC 协议进一步解决了这一问题，实现了更高效的数据传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-nginx-中如何设置-http的版本&#34;&gt;在 nginx 中，如何设置 http的版本？
&lt;/h2&gt;&lt;p&gt;在 &lt;strong&gt;Nginx&lt;/strong&gt; 中，可以通过配置文件中的 &lt;code&gt;http&lt;/code&gt; 块来设置 HTTP 的版本。以下是如何设置 HTTP/1.1 和 HTTP/2 版本的方法：&lt;/p&gt;
&lt;h3 id=&#34;1-配置-http11&#34;&gt;&lt;strong&gt;1. 配置 HTTP/1.1&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;HTTP/1.1 是默认的 HTTP 版本，所以一般情况下无需特别设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;example.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 不需要额外配置，Nginx 会默认使用 HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.html&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.htm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2-配置-http2&#34;&gt;&lt;strong&gt;2. 配置 HTTP/2&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;如果想启用 HTTP/2，需要在 &lt;code&gt;listen&lt;/code&gt; 指令中添加 &lt;code&gt;http2&lt;/code&gt; 关键字，且 HTTP/2 需要使用 HTTPS（TLS/SSL）连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;http2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 开启 HTTP/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;example.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/certificate.crt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/private.key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.html&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.htm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;注意事项&#34;&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP/2 仅在 HTTPS 下工作&lt;/strong&gt;，所以需要配置 SSL 证书。&lt;/li&gt;
&lt;li&gt;确保你的 Nginx 版本至少是 &lt;strong&gt;1.9.5&lt;/strong&gt; 及以上，因为 HTTP/2 支持是从这个版本开始引入的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成以上配置后，重启 Nginx 使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过这种方式，你就可以在 Nginx 中设置 HTTP 版本了。&lt;/p&gt;
&lt;h3 id=&#34;如何在nginx中设置http30&#34;&gt;如何在nginx中设置http3.0
&lt;/h3&gt;&lt;p&gt;要在 Nginx 中启用 &lt;strong&gt;HTTP/3.0&lt;/strong&gt;，需要确保你的 Nginx 版本支持 HTTP/3，并且还要配置相关的 QUIC 协议。Nginx 支持 HTTP/3 的版本是从 &lt;strong&gt;Nginx 1.25.0&lt;/strong&gt; 开始的（但需要注意，目前 HTTP/3 支持还在不断完善，建议使用较新的版本）。&lt;/p&gt;
&lt;p&gt;以下是配置 HTTP/3 的详细步骤：&lt;/p&gt;
&lt;h3 id=&#34;1-安装支持-http3-的-nginx-版本&#34;&gt;&lt;strong&gt;1. 安装支持 HTTP/3 的 Nginx 版本&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;确保你安装的 Nginx 版本支持 HTTP/3。你可以从官方源代码自行编译 Nginx，或者从第三方包管理工具中获取。&lt;/p&gt;
&lt;h3 id=&#34;2-配置-nginx-支持-http3&#34;&gt;&lt;strong&gt;2. 配置 Nginx 支持 HTTP/3&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;修改 Nginx 配置文件（通常在 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; 或 &lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt; 目录下），按照以下步骤配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;http2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# 支持 HTTP/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;http2&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;reuseport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 添加 reuseport，优化多核性能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;quic&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;reuseport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# 启用 QUIC/HTTP3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/certificate.crt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/private.key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 支持 TLS 1.3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_protocols&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;TLSv1.2&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;TLSv1.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;off&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# QUIC 需要配置的证书设置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/path/to/your/privkey.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# HTTP/3 使用的 ALPN
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;ssl_alpn&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;h3&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 指定 QUIC 的设置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;http3_max_concurrent_streams&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;quic_idle_timeout&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;quic_ack_delay_exponent&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;quic_initial_window_size&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;65536&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Alt-Svc&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;h3-23=&amp;#34;:443&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 指定支持 HTTP/3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;QUIC-Status&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$quic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.html&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;index.htm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3-启用-quic-和-http3&#34;&gt;&lt;strong&gt;3. 启用 QUIC 和 HTTP/3&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;确保开启了 QUIC 和 HTTP/3 的支持。配置中 &lt;code&gt;listen 443 quic reuseport;&lt;/code&gt; 是关键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-防火墙设置&#34;&gt;&lt;strong&gt;4. 防火墙设置&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;确保防火墙允许 &lt;strong&gt;UDP 443&lt;/strong&gt; 端口，因为 QUIC 使用的是 UDP 协议，而不是传统的 TCP。&lt;/p&gt;
&lt;h3 id=&#34;5-检查-nginx-配置和重启&#34;&gt;&lt;strong&gt;5. 检查 Nginx 配置和重启&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;确保配置没有语法错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nginx -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后重启 Nginx：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl restart nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;注意事项-1&#34;&gt;&lt;strong&gt;注意事项&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浏览器支持&lt;/strong&gt;：目前最新版本的 Chrome、Firefox、Edge 等浏览器支持 HTTP/3。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器支持&lt;/strong&gt;：确认服务器支持 QUIC 及 HTTP/3，并确保系统环境、库等都符合要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;说一下tcp的三次握手过程&#34;&gt;说一下tcp的三次握手过程？
&lt;/h2&gt;&lt;p&gt;TCP（传输控制协议）使用三次握手（Three-Way Handshake）过程来建立可靠的连接。这个过程确保了客户端和服务器之间的连接是可靠的，并且双方都准备好进行数据传输。以下是三次握手的详细步骤：&lt;/p&gt;
&lt;h3 id=&#34;1-第一次握手syn&#34;&gt;1. 第一次握手（SYN）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户端发送 SYN&lt;/strong&gt;：客户端向服务器发送一个 SYN（同步序列编号）包，表示请求建立连接。这个包中包含客户端的初始序列号（ISN）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;客户端 → 服务器: SYN, seq = x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-第二次握手syn-ack&#34;&gt;2. 第二次握手（SYN-ACK）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器响应 SYN-ACK&lt;/strong&gt;：服务器收到客户端的 SYN 包后，确认请求并发送一个 SYN-ACK（同步-确认）包作为响应。这个包中包含服务器的初始序列号（ISN）和对客户端 SYN 的确认号（即客户端的序列号 + 1）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;服务器 → 客户端: SYN-ACK, seq = y, ack = x + 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-第三次握手ack&#34;&gt;3. 第三次握手（ACK）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户端发送 ACK&lt;/strong&gt;：客户端收到服务器的 SYN-ACK 包后，发送一个 ACK（确认）包，确认收到服务器的 SYN-ACK。这个包中包含对服务器 SYN 的确认号（即服务器的序列号 + 1）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;客户端 → 服务器: ACK, seq = x + 1, ack = y + 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-连接建立&#34;&gt;4. 连接建立
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在完成这三次握手后，客户端和服务器之间的连接建立成功，双方可以开始数据传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-6&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三次握手的目的&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;确保双方都准备好进行通信。&lt;/li&gt;
&lt;li&gt;确保双方的初始序列号（ISN）已被确认。&lt;/li&gt;
&lt;li&gt;提供可靠的连接建立机制，确保数据传输的可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过三次握手，TCP 协议能够建立一个可靠的连接，确保数据的完整性和顺序性。&lt;/p&gt;
&lt;h2 id=&#34;说一下tcp断开连接的4次挥手&#34;&gt;说一下TCP断开连接的4次挥手
&lt;/h2&gt;&lt;p&gt;TCP 断开连接的过程称为四次挥手（Four-Way Handshake），用于安全地关闭一个 TCP 连接。这个过程确保双方都能正常地结束连接，避免数据丢失。以下是四次挥手的详细步骤：&lt;/p&gt;
&lt;h3 id=&#34;1-第一次挥手fin&#34;&gt;1. 第一次挥手（FIN）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主动关闭方发送 FIN&lt;/strong&gt;：主动关闭连接的一方（通常是客户端）发送一个 FIN（结束）包，表示它已经完成数据的发送，并希望关闭连接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;客户端 → 服务器: FIN, seq = x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-第二次挥手ack&#34;&gt;2. 第二次挥手（ACK）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;被动关闭方响应 ACK&lt;/strong&gt;：服务器收到 FIN 包后，发送一个 ACK（确认）包，确认收到客户端的 FIN。此时，服务器仍然可以继续发送数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;服务器 → 客户端: ACK, seq = y, ack = x + 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-第三次挥手fin&#34;&gt;3. 第三次挥手（FIN）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;被动关闭方发送 FIN&lt;/strong&gt;：当服务器完成数据发送后，它也会发送一个 FIN 包，表示它也希望关闭连接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;服务器 → 客户端: FIN, seq = z
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-第四次挥手ack&#34;&gt;4. 第四次挥手（ACK）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主动关闭方响应 ACK&lt;/strong&gt;：客户端收到服务器的 FIN 包后，发送一个 ACK 包，确认收到服务器的 FIN。此时，连接正式关闭。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;客户端 → 服务器: ACK, seq = x + 1, ack = z + 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-连接关闭&#34;&gt;5. 连接关闭
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在完成这四次挥手后，TCP 连接被安全地关闭，双方都可以释放相关的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-7&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;四次挥手的目的&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;确保双方都能正常地结束连接。&lt;/li&gt;
&lt;li&gt;确保所有未发送的数据都能被正确传输。&lt;/li&gt;
&lt;li&gt;避免数据丢失，确保连接的可靠关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过四次挥手，TCP 协议能够安全地断开连接，确保数据的完整性和可靠性。&lt;/p&gt;
&lt;h2 id=&#34;get-请求为什么要限制url的长度&#34;&gt;GET 请求为什么要限制url的长度？
&lt;/h2&gt;&lt;p&gt;GET 请求限制 URL 长度的原因主要包括以下几点：&lt;/p&gt;
&lt;h3 id=&#34;1-浏览器和服务器的限制&#34;&gt;1. 浏览器和服务器的限制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;浏览器限制&lt;/strong&gt;：不同的浏览器对 URL 的最大长度有不同的限制。虽然大多数现代浏览器支持较长的 URL，但仍然存在一个上限（通常在 2000 到 8000 字符之间）。超出这个限制可能导致请求失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器限制&lt;/strong&gt;：服务器软件（如 Apache、Nginx 等）也可能对 URL 长度设置限制。如果请求的 URL 超过服务器的最大长度限制，服务器可能会拒绝处理该请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-http-协议规范&#34;&gt;2. HTTP 协议规范
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP 规范&lt;/strong&gt;：HTTP 协议并没有明确规定 URL 的最大长度，但为了确保兼容性和可移植性，许多实现都遵循了某些约定。过长的 URL 可能会导致解析和处理上的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-性能考虑&#34;&gt;3. 性能考虑
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能影响&lt;/strong&gt;：较长的 URL 会增加网络传输的负担，尤其是在需要频繁发送请求的情况下。较长的 URL 可能会导致更高的延迟和更低的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-安全性&#34;&gt;4. 安全性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全风险&lt;/strong&gt;：过长的 URL 可能会引发安全问题，例如 URL 注入攻击。限制 URL 长度可以减少潜在的攻击面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-适用场景&#34;&gt;5. 适用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET 请求的设计&lt;/strong&gt;：GET 请求通常用于获取资源，参数应尽量简洁。对于复杂的查询或大量数据，推荐使用 POST 请求，因为 POST 请求的数据是通过请求体发送的，没有长度限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-8&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;GET 请求限制 URL 的长度主要是为了兼容性、性能、安全性和协议规范的考虑。对于需要传递大量数据或复杂参数的情况，使用 POST 请求更为合适。&lt;/p&gt;
&lt;h2 id=&#34;请说出对http协议中keep-alive-对理解&#34;&gt;请说出对http协议中，keep-alive 对理解？
&lt;/h2&gt;&lt;p&gt;在 HTTP 协议中，&lt;code&gt;Keep-Alive&lt;/code&gt; 是一种机制，用于在同一 TCP 连接上保持多个请求和响应的持续连接。它允许客户端和服务器在完成一个请求后，不立即关闭连接，而是保持连接的打开状态，以便后续的请求可以复用该连接。这种机制可以显著提高性能和效率，减少延迟和资源消耗。&lt;/p&gt;
&lt;h3 id=&#34;1-工作原理&#34;&gt;1. 工作原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久连接&lt;/strong&gt;：在 HTTP/1.1 中，持久连接是默认启用的，客户端和服务器可以在同一连接上发送多个请求和响应。通过在请求和响应头中使用 &lt;code&gt;Connection: keep-alive&lt;/code&gt;，可以明确表示希望保持连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接保持时间&lt;/strong&gt;：服务器可以设置一个超时时间（如 &lt;code&gt;Keep-Alive: timeout=5&lt;/code&gt;），在此时间内，如果没有新的请求到达，服务器将关闭连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-优势&#34;&gt;2. 优势
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;减少延迟&lt;/strong&gt;：通过复用连接，避免了每次请求都需要重新建立 TCP 连接的开销，从而减少了延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;：减少了连接的建立和关闭次数，降低了服务器和客户端的资源消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提高吞吐量&lt;/strong&gt;：在同一连接上发送多个请求可以提高数据传输的效率，尤其是在高延迟的网络环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用场景&#34;&gt;3. 使用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态资源请求&lt;/strong&gt;：在请求静态资源（如图片、CSS、JavaScript 文件）时，使用 &lt;code&gt;Keep-Alive&lt;/code&gt; 可以显著提高加载速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;频繁请求的应用&lt;/strong&gt;：在需要频繁进行请求的应用（如 AJAX 请求）中，使用持久连接可以提高性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-注意事项&#34;&gt;4. 注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接管理&lt;/strong&gt;：虽然 &lt;code&gt;Keep-Alive&lt;/code&gt; 可以提高性能，但过多的持久连接可能会导致服务器资源的浪费。因此，服务器通常会设置最大连接数和超时时间，以合理管理连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 的优势&lt;/strong&gt;：在 HTTP/2 中，持久连接的概念被进一步增强，支持多路复用，允许在同一连接上并行发送多个请求和响应，进一步提高了性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-9&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Keep-Alive&lt;/code&gt; 是 HTTP 协议中的一种机制，允许在同一 TCP 连接上保持多个请求和响应的持续连接。它通过减少连接建立和关闭的开销，提高了性能和效率，适用于需要频繁请求的场景。&lt;/p&gt;
&lt;h2 id=&#34;与缓存相关的头部信息有哪些&#34;&gt;与缓存相关的头部信息有哪些？
&lt;/h2&gt;&lt;p&gt;在 HTTP 中，与缓存相关的头部信息主要包括以下几种：&lt;/p&gt;
&lt;h3 id=&#34;1-请求头&#34;&gt;1. 请求头
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于指定请求和响应的缓存指令。可以控制缓存的行为，如 &lt;code&gt;no-cache&lt;/code&gt;、&lt;code&gt;no-store&lt;/code&gt;、&lt;code&gt;max-age&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cache-Control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cache-Control: max-age=3600
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If-Modified-Since&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于向服务器询问自指定时间以来资源是否已被修改。如果资源未修改，服务器可以返回 304 Not Modified。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;If-Modified-Since: Wed, 21 Oct 2021 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If-None-Match&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于向服务器询问资源的 ETag（实体标签）。如果 ETag 匹配，服务器可以返回 304 Not Modified。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;If-None-Match: &amp;#34;etag_value&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-响应头&#34;&gt;2. 响应头
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同样用于响应中，指定缓存的指令。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cache-Control: public, max-age=86400
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expires&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定响应的过期时间。过期后，缓存的内容被视为过时。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expires: Wed, 21 Oct 2021 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指示资源的最后修改时间。客户端可以使用此信息与 &lt;code&gt;If-Modified-Since&lt;/code&gt; 一起进行条件请求。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last-Modified: Wed, 21 Oct 2021 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ETag&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供资源的实体标签，用于标识特定版本的资源。客户端可以使用此信息与 &lt;code&gt;If-None-Match&lt;/code&gt; 一起进行条件请求。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ETag: &amp;#34;etag_value&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pragma&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于向旧版 HTTP/1.0 客户端指示缓存控制。通常用于 &lt;code&gt;no-cache&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Pragma: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-10&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;这些缓存相关的头部信息在 HTTP 中用于控制和管理缓存的行为，帮助提高性能和减少不必要的数据传输。合理使用这些头部可以有效地优化网络请求和响应的效率。&lt;/p&gt;
&lt;h2 id=&#34;tlsssl-的工作原理&#34;&gt;TLS/SSL 的工作原理
&lt;/h2&gt;&lt;p&gt;TLS/SSL全称安全传输层协议（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。&lt;/p&gt;
&lt;p&gt;TLS/SSL的功能实现主要依赖三类基本算法：散列函数hash、对称加密、非对称加密。这三类算法的作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于散列函数验证信息的完整性&lt;/li&gt;
&lt;li&gt;对称加密算法采用协商的秘钥对数据加密&lt;/li&gt;
&lt;li&gt;非对称加密实现身份认证和秘钥协商&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1）散列函数hash
常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。&lt;/p&gt;
&lt;p&gt;特点：在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。
（2）对称加密
对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。&lt;/p&gt;
&lt;p&gt;常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。&lt;/p&gt;
&lt;p&gt;特点：对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。
（3）非对称加密
非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。&lt;/p&gt;
&lt;p&gt;常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。&lt;/p&gt;
&lt;p&gt;特点：非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。&lt;/p&gt;
&lt;p&gt;综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。&lt;/p&gt;
&lt;h2 id=&#34;ca-证书是什么详解一下它的工作流程&#34;&gt;CA 证书是什么，详解一下它的工作流程？
&lt;/h2&gt;&lt;h3 id=&#34;什么是中间人攻击&#34;&gt;什么是中间人攻击
&lt;/h3&gt;&lt;p&gt;中间人攻击（Man-in-the-Middle Attack，MITM）是一种网络攻击方式，攻击者在通信双方之间秘密地拦截和篡改信息。攻击者可以伪装成通信的任一方，从而获取敏感信息（如用户名、密码、信用卡信息等）或操控通信内容。中间人攻击通常发生在不安全的网络环境中，例如公共 Wi-Fi。&lt;/p&gt;
&lt;h3 id=&#34;中间人攻击的工作原理&#34;&gt;中间人攻击的工作原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拦截通信&lt;/strong&gt;：攻击者通过各种手段（如 ARP 欺骗、DNS 欺骗等）拦截客户端与服务器之间的通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伪装身份&lt;/strong&gt;：攻击者伪装成客户端或服务器，向另一方发送请求或响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;篡改数据&lt;/strong&gt;：攻击者可以修改传输的数据，甚至注入恶意代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取敏感信息&lt;/strong&gt;：攻击者可以记录通信内容，获取敏感信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;应对中间人攻击的办法&#34;&gt;应对中间人攻击的办法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 HTTPS&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保网站使用 HTTPS 协议，利用 TLS/SSL 加密通信，防止数据在传输过程中被窃取或篡改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证证书&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端在建立连接时应验证服务器的数字证书，确保其由受信任的 CA 签发，并检查证书的有效性和完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 VPN&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在公共 Wi-Fi 网络中使用虚拟专用网络（VPN），加密所有网络流量，增加数据传输的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免公共 Wi-Fi&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免在公共 Wi-Fi 网络中进行敏感操作，如在线银行、购物等。如果必须使用，确保使用 VPN。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用双因素认证&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用双因素认证（2FA）增加额外的安全层，即使攻击者获取了密码，也无法轻易访问账户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;保持软件更新&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期更新操作系统、浏览器和应用程序，以修补已知的安全漏洞，降低被攻击的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用强密码&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用复杂且唯一的密码，避免使用容易猜测的密码，定期更换密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;监测异常活动&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控账户和网络活动，及时发现异常行为，采取相应措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结-11&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;中间人攻击是一种严重的网络安全威胁，通过拦截和篡改通信内容，攻击者可以获取敏感信息或操控数据。通过使用 HTTPS、验证证书、使用 VPN、避免公共 Wi-Fi、启用双因素认证等措施，可以有效降低中间人攻击的风险，保护用户的敏感信息和数据安全。&lt;/p&gt;
&lt;h2 id=&#34;什么是xss-攻击&#34;&gt;什么是xss 攻击？
&lt;/h2&gt;&lt;p&gt;XSS（跨站脚本攻击）通常利用用户输入的内容（如评论、留言等）来注入恶意脚本。以下是一些 XSS 攻击的示例，特别是针对评论输入的恶意脚本，以及它们如何在服务器中执行。&lt;/p&gt;
&lt;h3 id=&#34;示例-1存储型-xss&#34;&gt;示例 1：存储型 XSS
&lt;/h3&gt;&lt;p&gt;假设一个网站允许用户在评论区发布评论，但没有对输入进行适当的过滤和编码。攻击者可以提交以下恶意评论：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;XSS Attack!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;如何执行&#34;&gt;如何执行：
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户提交评论&lt;/strong&gt;：攻击者在评论区输入上述代码并提交。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器存储&lt;/strong&gt;：服务器将该评论存储在数据库中，未进行任何过滤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他用户访问&lt;/strong&gt;：当其他用户访问该评论时，网页会从数据库中读取评论并直接插入到 HTML 中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚本执行&lt;/strong&gt;：浏览器解析 HTML 时，执行了 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签中的 JavaScript 代码，导致弹出警告框。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;示例-2反射型-xss&#34;&gt;示例 2：反射型 XSS
&lt;/h3&gt;&lt;p&gt;攻击者可以构造一个恶意链接，利用 URL 参数注入脚本。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://example.com/comment?text=&amp;lt;script&amp;gt;alert(&amp;#39;Reflected XSS!&amp;#39;);&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;如何执行-1&#34;&gt;如何执行：
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户点击链接&lt;/strong&gt;：用户点击攻击者发送的链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器处理请求&lt;/strong&gt;：服务器接收到请求，提取 &lt;code&gt;text&lt;/code&gt; 参数并将其直接插入到响应的 HTML 中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚本执行&lt;/strong&gt;：浏览器解析响应时，执行了 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签中的 JavaScript 代码，导致弹出警告框。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;示例-3dom-型-xss&#34;&gt;示例 3：DOM 型 XSS
&lt;/h3&gt;&lt;p&gt;假设网页使用 JavaScript 从 URL 中提取参数并直接插入到 DOM 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;comment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果用户访问以下链接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://example.com/?comment=&amp;lt;script&amp;gt;alert(&amp;#39;DOM XSS!&amp;#39;);&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;如何执行-2&#34;&gt;如何执行：
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户访问链接&lt;/strong&gt;：用户访问包含恶意参数的链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 执行&lt;/strong&gt;：JavaScript 代码从 URL 中提取 &lt;code&gt;comment&lt;/code&gt; 参数并将其插入到页面中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚本执行&lt;/strong&gt;：浏览器执行了插入的脚本，导致弹出警告框。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结-12&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;在这些示例中，恶意脚本在服务器中被存储或反射为普通文本，但由于缺乏适当的输入验证和输出编码，当这些文本被插入到 HTML 中时，浏览器将其视为可执行的代码，从而导致 XSS 攻击的发生。为了防止 XSS 攻击，开发者应始终对用户输入进行严格的验证和过滤，并在输出时进行适当的编码。&lt;/p&gt;
&lt;h2 id=&#34;如何防范xss-攻击&#34;&gt;如何防范xss 攻击
&lt;/h2&gt;&lt;p&gt;你提到的对 &lt;code&gt;innerHTML&lt;/code&gt; 的使用确实是防止 XSS 攻击的重要方面。以下是一些具体的防御措施，可以帮助开发者有效防止 XSS 攻击：&lt;/p&gt;
&lt;h3 id=&#34;1-避免使用-innerhtml&#34;&gt;1. 避免使用 &lt;code&gt;innerHTML&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽量避免使用 &lt;code&gt;innerHTML&lt;/code&gt; 来插入用户输入的内容。可以使用 &lt;code&gt;textContent&lt;/code&gt; 或 &lt;code&gt;innerText&lt;/code&gt; 来安全地插入文本，这样可以防止浏览器将输入内容解析为 HTML。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 安全的插入方式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urlParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;comment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;userComment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 使用 textContent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-输入验证和过滤&#34;&gt;2. 输入验证和过滤
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对用户输入进行严格的验证，确保只接受预期的格式。例如，对于评论内容，可以限制字符类型、长度等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-输出编码&#34;&gt;3. 输出编码
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在将用户输入输出到 HTML 中时，进行适当的编码。可以使用库（如 DOMPurify）来清理和编码用户输入，确保不执行任何恶意脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用 DOMPurify 进行清理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cleanComment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DOMPurify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sanitize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;userComment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cleanComment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-使用安全的-http-头&#34;&gt;4. 使用安全的 HTTP 头
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置 &lt;code&gt;Content-Security-Policy&lt;/code&gt;（CSP）头，限制可执行的脚本来源。CSP 可以帮助防止 XSS 攻击，因为它限制了哪些资源可以被加载和执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Security-Policy: default-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-避免直接插入用户输入&#34;&gt;5. 避免直接插入用户输入
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽量避免直接将用户输入插入到 DOM 中。使用安全的 API 处理用户输入，例如使用 &lt;code&gt;createElement&lt;/code&gt; 和 &lt;code&gt;appendChild&lt;/code&gt; 方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;commentElement&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;commentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userComment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 使用 textContent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;commentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-定期安全审计&#34;&gt;6. 定期安全审计
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定期对应用程序进行安全审计和渗透测试，及时发现和修复 XSS 漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-使用框架的安全特性&#34;&gt;7. 使用框架的安全特性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果使用现代前端框架（如 React、Vue、Angular），它们通常会自动处理 XSS 问题，确保用户输入被安全地处理。尽量利用这些框架的安全特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏感信息的保护&#34;&gt;敏感信息的保护
&lt;/h3&gt;&lt;p&gt;对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。&lt;/p&gt;
&lt;h3 id=&#34;总结-13&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;防止 XSS 攻击需要综合考虑多个方面，特别是在处理用户输入时要格外小心。通过避免使用 &lt;code&gt;innerHTML&lt;/code&gt;、进行输入验证和输出编码、使用安全的 HTTP 头等措施，可以有效降低 XSS 攻击的风险，保护用户的安全。&lt;/p&gt;
&lt;h2 id=&#34;什么是csrf-攻击&#34;&gt;什么是CSRF 攻击？
&lt;/h2&gt;&lt;p&gt;CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。&lt;/p&gt;
&lt;p&gt;CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。
（2）攻击类型
常见的 CSRF 攻击有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。&lt;/li&gt;
&lt;li&gt;POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。&lt;/li&gt;
&lt;li&gt;链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何防范&#34;&gt;如何防范？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进行同源检测&lt;/strong&gt;，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer 字段会告诉服务器该网页是从哪个页面链接过来的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 CSRF Token 进行验证&lt;/strong&gt;，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对 Cookie 进行双重验证&lt;/strong&gt;，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在设置 cookie 属性的时候设置 Samesite&lt;/strong&gt; ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络劫持有几种如何防范&#34;&gt;网络劫持有几种，如何防范？
&lt;/h2&gt;&lt;p&gt;⽹络劫持分为两种:
（1）DNS劫持: (输⼊京东被强制跳转到淘宝这就属于dns劫持)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器&lt;/li&gt;
&lt;li&gt;302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容
（2）HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。&lt;/p&gt;
&lt;h2 id=&#34;浏览器中有哪些进程&#34;&gt;浏览器中有哪些进程？
&lt;/h2&gt;&lt;p&gt;在现代浏览器中，通常会使用多进程架构来提高性能、安全性和稳定性。以下是浏览器中常见的进程类型：&lt;/p&gt;
&lt;h3 id=&#34;1-浏览器主进程browser-process&#34;&gt;1. 浏览器主进程（Browser Process）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责管理整个浏览器的用户界面、标签页、地址栏、书签、历史记录等。它还负责与操作系统进行交互，处理用户输入和事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：通常只有一个主进程，负责协调其他进程的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-渲染进程renderer-process&#34;&gt;2. 渲染进程（Renderer Process）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责渲染网页内容，包括 HTML、CSS 和 JavaScript 的解析和执行。每个标签页通常会有一个独立的渲染进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：渲染进程与主进程相互独立，崩溃一个渲染进程不会影响其他标签页的运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-gpu-进程gpu-process&#34;&gt;3. GPU 进程（GPU Process）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责处理图形渲染任务，如 CSS 动画、WebGL 渲染等。将图形处理任务分配给 GPU 进程可以提高性能和效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：通常只有一个 GPU 进程，负责多个渲染进程的图形处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-网络进程network-process&#34;&gt;4. 网络进程（Network Process）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责处理网络请求和响应，包括 HTTP 请求、WebSocket 连接等。它还负责管理缓存和代理设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：在某些浏览器中，网络处理可能与渲染进程合并，但在多进程架构中，通常会有独立的网络进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-插件进程plugin-process&#34;&gt;5. 插件进程（Plugin Process）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责运行浏览器插件（如 Flash、Java 等）。由于插件可能会影响浏览器的稳定性和安全性，通常会将其放在独立的进程中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：每个插件可能会有自己的进程，确保插件崩溃不会影响主浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-服务工作线程service-worker&#34;&gt;6. 服务工作线程（Service Worker）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：在后台运行，处理网络请求、缓存和推送通知等。服务工作线程可以在浏览器关闭时继续运行，提供离线支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：每个服务工作线程是独立的，能够与多个页面进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-web-worker&#34;&gt;7. Web Worker
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：用于在后台线程中执行 JavaScript 代码，避免阻塞主线程。适用于处理计算密集型任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：Web Worker 运行在独立的线程中，不能直接访问 DOM。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-14&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;现代浏览器采用多进程架构，通过将不同的功能模块分配到独立的进程中，提高了性能、安全性和稳定性。主要的进程包括浏览器主进程、渲染进程、GPU 进程、网络进程、插件进程、服务工作线程和 Web Worker。这样的设计使得浏览器能够更好地处理复杂的网页和用户交互。&lt;/p&gt;
&lt;h2 id=&#34;进程之间的通信方式有哪些&#34;&gt;进程之间的通信方式有哪些？
&lt;/h2&gt;&lt;h2 id=&#34;说一下浏览器的缓存&#34;&gt;说一下浏览器的缓存
&lt;/h2&gt;&lt;p&gt;浏览器缓存的全过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；&lt;/li&gt;
&lt;li&gt;下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；&lt;/li&gt;
&lt;li&gt;如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；&lt;/li&gt;
&lt;li&gt;服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；&lt;/li&gt;
&lt;li&gt;如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是浏览器的强缓存什么是协商缓存两者的区别是什么&#34;&gt;什么是浏览器的强缓存什么是协商缓存？两者的区别是什么?
&lt;/h3&gt;&lt;p&gt;浏览器缓存的全过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；&lt;/li&gt;
&lt;li&gt;下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；&lt;/li&gt;
&lt;li&gt;如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；&lt;/li&gt;
&lt;li&gt;服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；&lt;/li&gt;
&lt;li&gt;如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。&lt;/p&gt;
&lt;p&gt;强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。&lt;/p&gt;
&lt;p&gt;（1）服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。
（2）Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，它提供了对资源的缓存的更精确的控制。它有很多不同的值，&lt;/p&gt;
&lt;p&gt;Cache-Control可设置的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age=来精确控制；&lt;/li&gt;
&lt;li&gt;private：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；&lt;/li&gt;
&lt;li&gt;no-cache：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；&lt;/li&gt;
&lt;li&gt;no-store：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；&lt;/li&gt;
&lt;li&gt;max-age=：设置缓存的最大有效期，单位为秒；&lt;/li&gt;
&lt;li&gt;s-maxage=：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；&lt;/li&gt;
&lt;li&gt;max-stale[=]：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。&lt;/p&gt;
&lt;p&gt;no-cache和no-store很容易混淆：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；&lt;/li&gt;
&lt;li&gt;no-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。
（2）协商缓存
如果命中强制缓存，我们无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面已经说到了，命中协商缓存的条件有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max-age=xxx 过期了&lt;/li&gt;
&lt;li&gt;值为no-store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。&lt;/p&gt;
&lt;p&gt;协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 Etag 和 Last-Modified 属性。
（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。
（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。&lt;/p&gt;
&lt;p&gt;当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。&lt;/p&gt;
&lt;p&gt;总结：
强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。&lt;/p&gt;
&lt;h2 id=&#34;点击刷新或者按f5按ctrlf5强制刷新地址栏回车有什么区别&#34;&gt;点击刷新或者按F5，按Ctrl+F5（强制刷新）、地址栏回车有什么区别？
&lt;/h2&gt;&lt;p&gt;点击刷新、按 &lt;code&gt;F5&lt;/code&gt; 和 &lt;code&gt;Ctrl+F5&lt;/code&gt; 的区别在于它们对浏览器缓存的处理方式不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;点击刷新按钮 / F5&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：浏览器会先检查本地缓存，看是否有该页面的资源，如果有则使用缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协商缓存&lt;/strong&gt;：会向服务器发出请求，验证缓存的有效性。如果资源未改变，服务器会返回 &lt;code&gt;304 Not Modified&lt;/code&gt;，浏览器会使用缓存的资源。如果资源已改变，服务器会返回最新的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：适合在页面内容不经常改变的情况下使用，减少不必要的网络请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ctrl + F5（强制刷新）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：忽略本地缓存，直接从服务器重新下载所有资源。无论缓存是否有效，都会请求服务器获取最新资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：用于希望获取页面最新内容或怀疑缓存内容已过期但没有自动更新时使用。会占用更多带宽和加载时间，但保证内容是最新的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;地址栏回车&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：和点击刷新 / F5 类似，也会检查缓存并进行请求验证。一般不会强制刷新缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点击刷新 / F5&lt;/strong&gt; 和 &lt;strong&gt;地址栏回车&lt;/strong&gt;：会使用缓存，只有在必要时才请求服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + F5&lt;/strong&gt;：跳过缓存，强制请求服务器获取最新资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些不同操作在开发和调试过程中非常有用，因为它们提供了灵活的缓存控制方式，确保页面资源的最新性或快速加载。&lt;/p&gt;
&lt;h2 id=&#34;浏览器的渲染原理&#34;&gt;浏览器的渲染原理
&lt;/h2&gt;&lt;h3 id=&#34;浏览器的渲染的流程&#34;&gt;浏览器的渲染的流程
&lt;/h3&gt;&lt;p&gt;浏览器的渲染流程主要包括以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析 HTML&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器会解析 HTML 文档，生成 DOM（Document Object Model）树。这是一个将 HTML 文档组织成树形结构的过程，所有的 HTML 元素都会转换为 DOM 树中的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析 CSS&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与 HTML 并行，浏览器会解析 CSS 样式表，生成 CSSOM（CSS Object Model）树。CSSOM 是将所有 CSS 样式解析成树形结构的对象模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建 Render Tree（渲染树）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 DOM 树与 CSSOM 树结合，生成渲染树（Render Tree）。渲染树包含了每个需要显示的节点以及它们的样式信息，不包括 &lt;code&gt;display: none&lt;/code&gt; 的元素，也不包括非可见节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;布局（Layout）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有了渲染树后，浏览器会计算每个节点的大小和位置，确定元素在页面上的确切位置。这一过程称为“布局”或“回流（Reflow）”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;绘制（Painting）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布局完成后，浏览器会根据渲染树对每个节点进行绘制，将其内容显示在屏幕上。这包括将文本、颜色、图像、边框等渲染出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;合成与显示（Compositing）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器将页面划分为多个图层，进行合成，然后将这些图层渲染到屏幕上。不同图层可以独立绘制和合成，以减少重绘和重排的成本，提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：
浏览器的渲染流程大致可以概括为：&lt;strong&gt;解析 HTML -&amp;gt; 解析 CSS -&amp;gt; 构建 Render Tree -&amp;gt; 布局 -&amp;gt; 绘制 -&amp;gt; 合成与显示&lt;/strong&gt;。这些步骤紧密相连，确保了页面的内容能高效地在屏幕上呈现。&lt;/p&gt;
&lt;p&gt;理解这个流程有助于优化网页的性能，例如，减少 DOM 操作、合并 CSS 文件、避免频繁触发回流和重绘，都可以提升页面的渲染效率。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
